/*
* Type definition for Survey JavaScript library for Vue (without core) v1.9.53
* Copyright (c) 2015-2022 Devsoft Baltic OÃœ  - https://surveyjs.io/
* License: MIT (http://www.opensource.org/licenses/mit-license.php)
*/
import { Base, Question, SurveyElement, FlowPanelModel, ISurvey } from "survey-core";
import { SurveyModel, QuestionHtmlModel, QuestionMatrixDropdownRenderedCell, QuestionPanelDynamicModel, PanelModel } from "survey-core";
import { Action, SurveyProgressButtonsModel, QuestionImageModel, QuestionRankingModel, ItemValue } from "survey-core";
import { LocalizableString, ISurveyElement, AdaptiveActionContainer, SurveyElementCore, ActionContainer } from "survey-core";
import { QuestionButtonGroupModel, ButtonGroupItemModel, TooltipManager, ListModel, MatrixDropdownColumn } from "survey-core";
import { QuestionMatrixDropdownModelBase, QuestionMatrixDropdownRenderedTable, QuestionMultipleTextModel, MultipleTextItemModel, QuestionTextModel } from "survey-core";
import { PageModel, PopupModel, PopupBaseViewModel, PopupSurveyModel, QuestionRowModel } from "survey-core";
import { DropdownMultiSelectListModel, QuestionTagboxModel, SurveyTimerModel, QuestionBooleanModel, QuestionCheckboxModel } from "survey-core";
import { QuestionCommentModel, QuestionCompositeModel, QuestionCustomModel, QuestionDropdownModel, QuestionEmptyModel } from "survey-core";
import { QuestionExpressionModel, QuestionFileModel, QuestionImagePickerModel, QuestionMatrixModel, QuestionMatrixDropdownModel } from "survey-core";
import { QuestionMatrixDynamicModel, QuestionRadiogroupModel, QuestionRatingModel, QuestionSignaturePadModel, IArrayPropertyDecoratorOptions } from "survey-core";
import { IAttachKey2clickOptions } from "survey-core";
import Vue from "vue";

export { SurveyModel } from "survey-core";
export { SurveyWindowModel } from "survey-core";
export { settings } from "survey-core";
export { surveyLocalization } from "survey-core";
export { surveyStrings } from "survey-core";
export { SurveyModel as Model } from "survey-core";

export enum DragTypeOverMeEnum {
  InsideEmptyPanel = 1,
  MultilineRight,
  MultilineLeft
}
export declare class BaseVue extends Vue {
  protected getModel(): Base;
  protected onMounted(): void;
  protected onUpdated(): void;
  protected onDestroyed(): void;
  protected onCreated(): void;
  created(): void;
  beforeMount(): void;
  beforeUpdate(): void;
  mounted(): void;
  updated(): void;
  destroyed(): void;
}
export declare class BooleanRadioItem extends Vue {
  question: any;
  locText: any;
  value: any;
  handleChange: (event: any) => void;
}
export declare class BrandInfo extends Vue {
  constructor();
}
export declare class CustomWidget extends Vue {
  css: any;
  question: Question;
  get hasDefaultRender(): boolean;
  get hasHtml(): boolean;
  get customHtml(): string;
  get hasVueComponent(): boolean;
  get componentName(): string;
  mounted(): void;
  updated(): void;
  beforeDestroy(): void;
}
export declare class ElementHeader extends Vue {
  element: SurveyElement;
  css: any;
  clickTitleFunction(): void;
}
export declare class FlowPanel extends Vue {
  question: FlowPanelModel;
  isEditMode: any;
  css: any;
  isCollapsedValue: boolean;
  rootNodeValue: any;
  get rootNode(): any;
  beforeMount(): void;
  protected setRootNode(): void;
  protected renderQuestion(question: Question): string;
  mounted(): void;
  get rootStyle(): any;
  get showIcon(): boolean;
  get rows(): any;
  get hasTitle(): boolean;
  get survey(): ISurvey;
  get iconCss(): string;
  get isCollapsed(): boolean;
  set isCollapsed(val: boolean);
  changeExpanded(): void;
}
export declare class FlowPanelElement extends Vue {
  static idValue: number;
  node: any;
  panel: FlowPanelModel;
  css: any;
  elementIdValue: string;
  question: Question;
  tagName: string;
  nodes: any;
  text: string;
  style: any;
  get elementId(): string;
  get survey(): SurveyModel;
  beforeMount(): void;
  getComponentName(element: Question): string;
}
export declare class Html extends Vue {
  question: QuestionHtmlModel;
  css: any;
}
export declare class MatrixCell extends Vue {
  question: Question;
  cell: QuestionMatrixDropdownRenderedCell;
  isVisible: boolean;
  getComponentName(element: Question): string;
  getHeaders(): string;
  getCellStyle(): any;
  mounted(): void;
}
export declare class OtherChoice extends Vue {
  question: Question;
  commentClass: any;
}
export declare class PanelDynamicProgress extends Vue {
  question: QuestionPanelDynamicModel;
  get cssClass(): any;
}
export declare class PanelDynamicRemove extends Vue {
  question: QuestionPanelDynamicModel;
  panel: PanelModel;
  isCollapsedValue: boolean;
  mounted(): void;
  beforeDestroy(): void;
  removePanelClick(panel: any): void;
  get isCollapsed(): boolean;
  set isCollapsed(val: boolean);
}
export declare class PaneldynamicAction extends Vue {
  data: any;
  item: Action;
  protected get question(): QuestionPanelDynamicModel;
}
export declare class Progress extends Vue {
  survey: SurveyModel;
  css: any;
  get progress(): string;
  getProgressTextInBarCss(css: any): string;
  getProgressTextUnderBarCss(css: any): string;
}
export declare class ProgressButtons extends Vue {
  constructor();
  survey: SurveyModel;
  css: any;
  hasScroller: boolean;
  progressButtonsModel: SurveyProgressButtonsModel;
  updateScroller: any;
  mounted(): void;
  isListElementClickable(index: number): boolean;
  getListElementCss(index: number): string;
  clickListElement(index: number): void;
  getScrollButtonCss(hasScroller: boolean, isLeftScroll: boolean): any;
  clickScrollButton(isLeftScroll: boolean): void;
  beforeDestroy(): void;
}
export declare class QuestionImage extends Vue {
  question: QuestionImageModel;
  css: any;
}
export declare class RankingItem extends Vue {
  index: number;
  indexText: string;
  text: string;
  handleKeydown: any;
  cssClasses: any;
  question: QuestionRankingModel;
  item: ItemValue;
}
export declare class SurveyHeader extends Vue {
  survey: SurveyModel;
  mounted(): void;
}
export declare class SurveyString extends Vue {
  locString: LocalizableString;
}
export declare class SurveyStringEditor extends Vue {
  locString: LocalizableString;
  onInput: (event: any) => void;
  onClick: (event: any) => void;
}
export declare class SurveyStringViewer extends Vue {
  constructor();
  locString: LocalizableString;
}
export declare class TitleActions extends Vue {
  constructor();
  element: ISurveyElement;
  css: any;
  get toolbar(): any;
}
export declare class TitleContent extends Vue {
  element: SurveyElementCore;
  css: any;
}
export declare class TitleElement extends Vue {
  element: SurveyElementCore;
  css: any;
  keyup(evt: any): void;
}
export declare class ActionBarViewModel extends BaseVue {
  constructor(props: any);
  model: any;
  handleClick: boolean;
  getModel(): ActionContainer<Action>;
  mounted(): void;
  beforeDestroy(): void;
}
export declare class ButtonGroupItem extends BaseVue {
  constructor(props: any);
  item: ItemValue;
  question: QuestionButtonGroupModel;
  index: number;
  model: ButtonGroupItemModel;
  getModel(): ItemValue;
}
export declare class CheckboxItem extends BaseVue {
  question: any;
  item: ItemValue;
  index: any;
  hideLabel: boolean;
  protected getModel(): Base;
  get isAllSelected(): boolean;
  set isAllSelected(val: boolean);
}
export declare class DropdownComponent extends BaseVue {
  question: Question;
  inputElement: any;
  get model(): any;
  getModel(): any;
  inputChange(event: any): void;
  inputKeyHandler(event: any): void;
  click(event: any): void;
  clear(event: any): void;
  keyhandler(event: any): void;
  blur(event: any): void;
  protected onCreated(): void;
  protected onMounted(): void;
  protected onUpdated(): void;
  updateInputDomElement(): void;
}
export declare class DropdownOptionItem extends BaseVue {
  constructor();
  item: ItemValue;
  getModel(): ItemValue;
}
export declare class Errors extends BaseVue {
  element: SurveyElement;
  location: any;
  tooltipManager: TooltipManager;
  protected getModel(): Base;
  updated(): void;
  destroyed(): void;
}
export declare class List extends BaseVue {
  constructor();
  model: ListModel;
  getModel(): ListModel;
  change(event: any): void;
  keyup(event: any): void;
  mouseMove(event: any): void;
}
export declare class MatrixHeaderRequired extends BaseVue {
  question: Question;
  column: MatrixDropdownColumn;
  protected getModel(): Base;
}
export declare class MatrixTable extends BaseVue {
  question: QuestionMatrixDropdownModelBase;
  get table(): QuestionMatrixDropdownRenderedTable;
  protected getModel(): Base;
}
export declare class MultipleTextItem extends BaseVue {
  question: QuestionMultipleTextModel;
  item: MultipleTextItemModel;
  getModel(): QuestionTextModel;
  getComponentName(question: Question): "survey-customwidget" | "survey-text";
}
export declare class Page extends BaseVue {
  survey: SurveyModel;
  page: PageModel;
  css: any;
  protected getModel(): Base;
  protected onMounted(): void;
  protected onUpdated(): void;
  get showDescription(): boolean;
  get num(): string;
  get rows(): any;
}
export declare class Panel extends BaseVue {
  question: PanelModel;
  isEditMode: any;
  css: any;
  isCollapsed: boolean;
  protected getModel(): Base;
  protected onMounted(): void;
  beforeDestroy(): void;
  get rootStyle(): any;
  get showIcon(): boolean;
  get rows(): any;
  get survey(): ISurvey;
  cancelPreview(): void;
  get requiredTextCss(): any;
}
export declare class PanelDynamicAddBtn extends PaneldynamicAction {
  addPanelClick(): void;
}
export declare class PanelDynamicNextBtn extends PaneldynamicAction {
  nextPanelClick(): void;
}
export declare class PanelDynamicPrevBtn extends PaneldynamicAction {
  prevPanelClick(): void;
}
export declare class PanelDynamicProgressText extends PaneldynamicAction {
}
export declare class PanelDynamicProgressV2 extends PanelDynamicProgress {
}
export declare class Popup extends BaseVue {
  model: any;
  targetElement: any;
  popupContainer: any;
  popupViewModel: PopupBaseViewModel;
  protected getModel(): PopupModel;
  onMounted(): void;
  destroyed(): void;
}
export declare class PopupPointer extends BaseVue {
  model: PopupBaseViewModel;
}
export declare class PopupSurvey extends BaseVue {
  constructor();
  window: PopupSurveyModel;
  survey: SurveyModel;
  isExpanded: boolean;
  isexpanded: boolean;
  closeOnCompleteTimeout: number;
  surveyWindow: PopupSurveyModel;
  protected getModel(): Base;
  get windowSurvey(): SurveyModel;
  get css(): any;
  get expandedCss(): any;
  get isExpandedSurvey(): boolean;
  set isExpandedSurvey(val: boolean);
  doExpand(): void;
}
export declare class QuestionVue<T> extends BaseVue {
  innerValue: any;
  question: T;
  css: any;
  changeQuestion(new_val: T, old_val: T): void;
  protected getModel(): Base;
  protected onMounted(): void;
  beforeDestroy(): void;
}
export declare class RadiogroupItem extends BaseVue {
  question: any;
  item: ItemValue;
  index: any;
  hideLabel: boolean;
  protected getModel(): Base;
  getLabelClass(item: any): any;
  getControlLabelClass(item: any): any;
}
export declare class Row extends BaseVue {
  row: QuestionRowModel;
  css: any;
  survey: SurveyModel;
  protected getModel(): Base;
  protected onMounted(): void;
  beforeDestroy(): void;
}
export declare class Skeleton extends BaseVue {
  constructor();
}
export declare class Survey extends BaseVue {
  constructor();
  survey: SurveyModel;
  model: SurveyModel;
  processedCompletedHtmlValue: string;
  updater: number;
  get pageId(): string;
  get navId(): string;
  protected getModel(): Base;
  get vueSurvey(): SurveyModel;
  onPropertyChanged(value: string, oldValue: string): void;
  forceUpdate(): void;
  protected onMounted(): void;
  beforeDestroy(): void;
  get hasTitle(): boolean;
  get hasCompletedPage(): boolean;
  get css(): any;
  getProcessedCompletedHtml(): string;
  getCompletedStateClasses(): any;
  start(): void;
  doTrySaveAgain(): void;
}
export declare class SurveyElementVue extends BaseVue {
  css: any;
  survey: SurveyModel;
  element: SurveyElement;
  row: QuestionRowModel;
  protected getModel(): Base;
  getComponentName(element: Question): string;
  getContentClass(element: Question): string;
  get hasErrorsOnTop(): boolean;
  get hasErrorsOnBottom(): boolean;
  mounted(): void;
}
export declare class SurveyNavigationButton extends BaseVue {
  item: Action;
  getModel(): Base;
  buttonMouseDown(): Base;
}
export declare class SurveyQuestionMatrixDetailButton extends BaseVue {
  item: Action;
  get question(): any;
  get row(): any;
  getModel(): Base;
}
export declare class SurveyQuestionMatrixDynamicDragDropIcon extends BaseVue {
  item: Action;
  get question(): any;
  getModel(): Base;
}
export declare class SurveyQuestionMatrixDynamicRemoveButton extends BaseVue {
  item: Action;
  get question(): any;
  get row(): any;
  getModel(): Base;
}
export declare class SvgIcon extends BaseVue {
  constructor();
  size: number;
  width: number;
  height: number;
  iconName: string;
  svgIconElement: any;
  title: any;
  onSizePropertyChanged(): void;
  onWidthPropertyChanged(): void;
  onHeightPropertyChanged(): void;
  onIconNamePropertyChanged(): void;
  onUpdated(): void;
  onMounted(): void;
}
export declare class TagboxComponent extends BaseVue {
  question: Question;
  get model(): any;
  getModel(): any;
  inputChange(event: any): void;
  click(event: any): void;
  clear(event: any): void;
  keyhandler(event: any): void;
  blur(event: any): void;
  protected onCreated(): void;
}
export declare class TagboxFilterComponent extends BaseVue {
  model: DropdownMultiSelectListModel;
  question: QuestionTagboxModel;
  getModel(): DropdownMultiSelectListModel;
  inputChange(event: any): void;
  inputKeyHandler(event: any): void;
  blur(event: any): void;
}
export declare class TagboxItem extends BaseVue {
  constructor();
  item: ItemValue;
  question: QuestionTagboxModel;
  getModel(): ItemValue;
  removeItem(event: any): void;
}
export declare class TimerPanel extends BaseVue {
  timerModel: SurveyTimerModel;
  css: any;
  get text(): string;
  protected getModel(): Base;
}
export declare class Boolean extends QuestionVue<QuestionBooleanModel> {
  onSwitchClick(event: any): void;
  onLabelClick(event: any, value: boolean): void;
}
export declare class ButtonGroup extends QuestionVue<QuestionButtonGroupModel> {
  question: QuestionButtonGroupModel;
  getModel(): QuestionButtonGroupModel;
}
export declare class Checkbox extends QuestionVue<QuestionCheckboxModel> {
}
export declare class Comment extends QuestionVue<QuestionCommentModel> {
  change(event: any): void;
}
export declare class Composite extends QuestionVue<QuestionCompositeModel> {
  get contentPanel(): PanelModel;
}
export declare class Custom extends QuestionVue<QuestionCustomModel> {
  get contentQuestion(): Question;
  getComponentName(element: Question): string;
}
export declare class Dropdown extends QuestionVue<QuestionDropdownModel> {
}
export declare class DropdownSelect extends QuestionVue<QuestionDropdownModel> {
  click(event: any): void;
  keyUp(event: any): void;
}
export declare class Empty extends QuestionVue<QuestionEmptyModel> {
}
export declare class Expression extends QuestionVue<QuestionExpressionModel> {
}
export declare class File extends QuestionVue<QuestionFileModel> {
  doRemoveFile(data: any): void;
}
export declare class ImagePicker extends QuestionVue<QuestionImagePickerModel> {
  getItemClass(item: any): string;
}
export declare class ImagePickerItem extends QuestionVue<QuestionImagePickerModel> {
  question: QuestionImagePickerModel;
  item: ImagePickerItem;
  getItemClass(item: any): string;
}
export declare class Matrix extends QuestionVue<QuestionMatrixModel> {
  cellClick(row: any, column: any): void;
}
export declare class MatrixDropdown extends QuestionVue<QuestionMatrixDropdownModel> {
}
export declare class MatrixDynamic extends QuestionVue<QuestionMatrixDynamicModel> {
  addRowClick(): void;
}
export declare class MultipleText extends QuestionVue<QuestionMultipleTextModel> {
}
export declare class PanelDynamic extends QuestionVue<QuestionPanelDynamicModel> {
  get renderedPanels(): any;
}
export declare class QuestionText extends QuestionVue<QuestionTextModel> {
  change(event: any): void;
  keyup(event: any): void;
  get inputStyle(): any;
}
export declare class Radiogroup extends QuestionVue<QuestionRadiogroupModel> {
  get choicesCount(): number;
  getItemClass(item: any): string;
}
export declare class Ranking extends QuestionVue<QuestionRankingModel> {
}
export declare class Rating extends QuestionVue<QuestionRatingModel> {
}
export declare class RatingDropdown extends QuestionVue<QuestionRatingModel> {
}
export declare class SignaturePad extends QuestionVue<QuestionSignaturePadModel> {
}
/*
* Obsolete, please use PopupSurvey
*/
export declare class SurveyWindow extends PopupSurvey {
  constructor();
}
export declare class Tagbox extends QuestionVue<QuestionTagboxModel> {
}
export declare class BooleanCheckbox extends Boolean {
}
export declare class BooleanRadio extends Boolean {
}
export declare class BooleanSwitch extends Boolean {
}
export declare function property(options?: any): (target: any, key: string) => void;
export declare function propertyArray(options?: IArrayPropertyDecoratorOptions): (target: any, key: string) => void;
export declare function attachKey2click(evt: any, options?: IAttachKey2clickOptions): void;
export declare var registerFunction: (name: string, func: any) => any;